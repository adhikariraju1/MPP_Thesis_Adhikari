arrange(county.fips, year) %>%
group_by(county.fips) %>%
mutate(repshare.lag = lag(rep.share)) %>%
filter(year >= 2012)
View(p2election_df)
#Add a lag of rep.voteshare and then remove year 1988:
p2election_df <- p2election_df %>%
arrange(county.fips, year) %>%
group_by(county.fips) %>%
mutate(repshare.lag = lag(rep.share)) %>%
filter(year > 2012)
#Creating a variable to see whether a county is a democratic county or a republican county
p2election_df$is.rep.2016 <- ifelse(p2election_df$rep.share > 0.50, "1", "0")
p2election_df$is.rep.2012 <- ifelse(p2election_df$repshare.lag > 0.50, "1", "0")
p2election_df$is.rep.2016 <- as.numeric(p2election_df$is.rep.2016)
p2election_df$is.rep.2012 <- as.numeric(p2election_df$is.rep.2012)
p2election_df <- p2election_df[c(1:4,7:10)]
export(merged_df4, "part1data.csv")
packages <- c("bea.R", "acs", "magrittr", "httr", "tidyr", "blsAPI", "rjson", "readxl", "dplyr", "jsonlite",
"stringr", "rJava", "xlsx", "qdap", "data.table", "plm", "rio")
load <- lapply(packages, require, character.only = T)
export(merged_df4, "part1data.csv")
#********************************************Pre-processing ritual************************************
#Loading all the necessary packages
packages <- c("bea.R", "acs", "magrittr", "httr", "tidyr", "blsAPI", "rjson", "readxl", "dplyr", "jsonlite",
"stringr", "rJava", "xlsx", "qdap", "data.table", "plm", "rio")
load <- lapply(packages, require, character.only = T)
#Setting the working directory
setwd("C:/RajuPC/MPP Final Thesis/WorkingDirectory")
#All the keys for different APIs obtained from the respective websites
blskey <- "a9e62413e38741b5aeb814efc5a3d066"
beaKey <- 'C3812F4D-F498-40F8-9F36-9FF5AF65DBD7'
censusKey <- "c7ed765d1b03f4217ccc4b37d31b0dc3580db44e"
datagovkey <- "ubFrNGonfwMQm3lK04C6djaMcqFuIe5mvev4RooI"
source("Statistics.R")
m1_fe <- plm(rep.share ~ unemp_gro + PCI_gro, merged_df4)
summary(m1_fe)
View(p2election_df)
#********************************************Pre-processing ritual************************************
#Loading all the necessary packages
packages <- c("bea.R", "acs", "magrittr", "httr", "tidyr", "blsAPI", "rjson", "readxl", "dplyr", "jsonlite",
"stringr", "rJava", "xlsx", "qdap", "data.table", "plm", "rio")
load <- lapply(packages, require, character.only = T)
#Setting the working directory
setwd("C:/RajuPC/MPP Final Thesis/WorkingDirectory")
#All the keys for different APIs obtained from the respective websites
blskey <- "a9e62413e38741b5aeb814efc5a3d066"
beaKey <- 'C3812F4D-F498-40F8-9F36-9FF5AF65DBD7'
censusKey <- "c7ed765d1b03f4217ccc4b37d31b0dc3580db44e"
datagovkey <- "ubFrNGonfwMQm3lK04C6djaMcqFuIe5mvev4RooI"
#***************Link with other R files********************************************************8888
#********************************************Election dataset************************************
#Loading Republican voting data:
election_df1 <- read.csv("full-us-presidential-counties-2012-2016-rep.csv")
#Renaming column names to merge them with other data later
names(election_df1)[names(election_df1)=="state.abb"] <- "state"
names(election_df1)[names(election_df1)=="county.name"] <- "county"
names(election_df1)[names(election_df1)=="ï..year"] <- "year"
names(election_df1)[names(election_df1)=="vote.percent"] <- "vote.percent.rep"
#Converting the county and state columns from factors into strings so that they can be merged with other dataframes later
election_df1$county <- as.character(election_df1$county)
election_df1$state <- as.character(election_df1$state)
#subsetting only the necessary columns for the final dataframe.
election_df1 <- election_df1[c(1,2,5,7,10)]
#Loading Democratic voting data:
election_df2 <- read.csv("full-us-presidential-counties-2012-2016-demo.csv")
#Renaming column names to merge them with other data later
names(election_df2)[names(election_df2)=="state.abb"] <- "state"
names(election_df2)[names(election_df2)=="county.name"] <- "county"
names(election_df2)[names(election_df2)=="ï..year"] <- "year"
names(election_df2)[names(election_df2)=="vote.percent"] <- "vote.percent.dem"
#Converting the county and state columns from factors into strings so that they can be merged with other dataframes later
election_df2$county <- as.character(election_df2$county)
election_df2$state <- as.character(election_df2$state)
#subsetting only the necessary columns for the final dataframe.
election_df2 <- election_df2[c(1,2,5,7,10)]
#Merging republican and democratic data to get the two-party voteshare:
election_df <- merge(election_df1, election_df2, by = c('county.fips', 'year', 'county', 'state'),
all = TRUE)
#Creating a variable for republican two-party vote share:
election_df$rep.share <- election_df$vote.percent.rep / (election_df$vote.percent.rep + election_df$vote.percent.dem)
#Add a lag of rep.voteshare and then remove year 2012:
election_df <- election_df %>%
arrange(county.fips, year) %>%
group_by(county.fips) %>%
mutate(repshare.lag = lag(rep.share)) %>%
filter(year > 2012)
#Creating a variable to see whether a county is a democratic county or a republican county
election_df$is.rep.2016 <- ifelse(election_df$rep.share > 0.50, "1", "0")
election_df$is.rep.2012 <- ifelse(election_df$repshare.lag > 0.50, "1", "0")
election_df$is.rep.2016 <- as.numeric(election_df$is.rep.2016)
election_df$is.rep.2012 <- as.numeric(election_df$is.rep.2012)
election_df <- election_df[c(1:4,7:10)]
View(election_df)
beaPop <- list(
'UserID' = beaKey ,
'Method' = 'GetData',
'datasetname' = 'RegionalIncome',
'TableName' = 'CA1' ,
'LineCode' = '2',
'Year' = '2012, 2015' ,
'GeoFips' = 'COUNTY' ,
'ResultFormat' = 'json'
)
beaPop <- beaGet(beaPop, asString = T, asTable = F)
Population <- jsonlite::fromJSON(beaPop)$BEAAPI$Results$Data %>%
mutate(DataValue = ifelse(DataValue == '(NA)', NA, DataValue),
DataValue = as.numeric(DataValue)) %>%
rename(Year = TimePeriod, Pop = DataValue) %>%
mutate(Year = as.numeric(Year))
View(Population)
names(Population)[5]<-"Pop_Label"
Population <- Population[, -c(1,5,6,8)]
names(Population)[5]<-"Pop_Label"
names(Population)[4]<-"pop"
Population <- Population[, -c(1,5,6,8)]
#BEA Regional Income Data: Per Capita Income by county
beaPCI <- list(
'UserID' = beaKey ,
'Method' = 'GetData',
'datasetname' = 'RegionalIncome',
'TableName' = 'CA1' ,
'LineCode' = '3',
'Year' = '2012, 2015' ,
'GeoFips' = 'COUNTY' ,
'ResultFormat' = 'json'
);
beaPCI <- beaGet(beaPCI, asString = T, asTable = F)
PerCapitaIncome <- jsonlite::fromJSON(beaPCI)$BEAAPI$Results$Data %>%
mutate(DataValue = ifelse(DataValue == '(NA)', NA, DataValue),
DataValue = as.numeric(DataValue)) %>%
rename(Year = TimePeriod, PCI = DataValue) %>%
mutate(Year = as.numeric(Year))
View(PerCapitaIncome)
names(PerCapitaIncome)[5]<-"PCI_Label"
names(PerCapitaIncome)[4]<-"pci"
PerCapitaIncome <- PerCapitaIncome[, -c(1,5,6,8)]
beaPercapita_Current_Transfer <- beaGet(beaPercapita_Current_Transfer, asString = T, asTable = F)
PerCapitaCurrentTransfer <- jsonlite::fromJSON(beaPercapita_Current_Transfer)$BEAAPI$Results$Data %>%
mutate(DataValue = ifelse(DataValue == '(NA)', NA, DataValue),
DataValue = as.numeric(DataValue)) %>%
rename(Year = TimePeriod, PCCT = DataValue) %>%
mutate(Year = as.numeric(Year))
beaPercapita_Current_Transfer <- list(
'UserID' = beaKey ,
'Method' = 'GetData',
'datasetname' = 'RegionalIncome',
'TableName' = 'CA30' ,
'LineCode' = '130',
'Year' = '2012, 2015' ,
'GeoFips' = 'COUNTY' ,
'ResultFormat' = 'json'
);
beaPercapita_Current_Transfer <- beaGet(beaPercapita_Current_Transfer, asString = T, asTable = F)
PerCapitaCurrentTransfer <- jsonlite::fromJSON(beaPercapita_Current_Transfer)$BEAAPI$Results$Data %>%
mutate(DataValue = ifelse(DataValue == '(NA)', NA, DataValue),
DataValue = as.numeric(DataValue)) %>%
rename(Year = TimePeriod, PCCT = DataValue) %>%
mutate(Year = as.numeric(Year))
names(PerCapitaCurrentTransfer)[5]<-"PCCT_Label"
names(PerCapitaCurrentTransfer)[4]<-"pcct"
PerCapitaCurrentTransfer <- PerCapitaCurrentTransfer[, -c(1,5,6,8)]
beaAdjustment_Residence <- list(
'UserID' = beaKey ,
'Method' = 'GetData',
'datasetname' = 'RegionalIncome',
'TableName' = 'CA91' ,
'LineCode' = '30',
'Year' = '2012, 2015' ,
'GeoFips' = 'COUNTY' ,
'ResultFormat' = 'json'
);
beaAdjustment_Residence <- beaGet(beaAdjustment_Residence, asString = T, asTable = F)
AdjustmentResidence <- jsonlite::fromJSON(beaAdjustment_Residence)$BEAAPI$Results$Data %>%
mutate(DataValue = ifelse(DataValue == '(NA)', NA, DataValue),
DataValue = as.numeric(DataValue)) %>%
rename(Year = TimePeriod, Adj_res = DataValue) %>%
mutate(Year = as.numeric(Year))
names(AdjustmentResidence)[5]<-"Adj_res_Label"
names(AdjustmentResidence)[4]<-"adj_res"
AdjustmentResidence <- AdjustmentResidence[, -c(1,5,6,8)]
View(PerCapitaIncome)
View(PerCapitaCurrentTransfer)
View(PerCapitaIncome)
View(AdjustmentResidence)
View(Population)
beaAdjustment_Residence <- list(
'UserID' = beaKey ,
'Method' = 'GetData',
'datasetname' = 'RegionalIncome',
'TableName' = 'CA91' ,
'LineCode' = '30',
'Year' = '2012, 2015' ,
'GeoFips' = 'COUNTY' ,
'ResultFormat' = 'json'
);
beaAdjustment_Residence <- beaGet(beaAdjustment_Residence, asString = T, asTable = F)
AdjustmentResidence <- jsonlite::fromJSON(beaAdjustment_Residence)$BEAAPI$Results$Data %>%
mutate(DataValue = ifelse(DataValue == '(NA)', NA, DataValue),
DataValue = as.numeric(DataValue)) %>%
rename(Year = TimePeriod, Adj_res = DataValue) %>%
mutate(Year = as.numeric(Year))
View(AdjustmentResidence)
#BEA Regional Income Data: Population by county
##2016 Data is not available, so we will use 2015 data
beaPop <- list(
'UserID' = beaKey ,
'Method' = 'GetData',
'datasetname' = 'RegionalIncome',
'TableName' = 'CA1' ,
'LineCode' = '2',
'Year' = '2012, 2015' ,
'GeoFips' = 'COUNTY' ,
'ResultFormat' = 'json'
)
beaPop <- beaGet(beaPop, asString = T, asTable = F)
Population <- jsonlite::fromJSON(beaPop)$BEAAPI$Results$Data %>%
mutate(DataValue = ifelse(DataValue == '(NA)', NA, DataValue),
DataValue = as.numeric(DataValue)) %>%
rename(Year = TimePeriod, Pop = DataValue) %>%
mutate(Year = as.numeric(Year))
names(Population)[5]<-"Pop_Label"
names(Population)[7]<-"pop"
Population <- Population[, -c(1,5,6,8)]
#BEA Regional Income Data: Per Capita Income by county
beaPCI <- list(
'UserID' = beaKey ,
'Method' = 'GetData',
'datasetname' = 'RegionalIncome',
'TableName' = 'CA1' ,
'LineCode' = '3',
'Year' = '2012, 2015' ,
'GeoFips' = 'COUNTY' ,
'ResultFormat' = 'json'
);
beaPCI <- beaGet(beaPCI, asString = T, asTable = F)
PerCapitaIncome <- jsonlite::fromJSON(beaPCI)$BEAAPI$Results$Data %>%
mutate(DataValue = ifelse(DataValue == '(NA)', NA, DataValue),
DataValue = as.numeric(DataValue)) %>%
rename(Year = TimePeriod, PCI = DataValue) %>%
mutate(Year = as.numeric(Year))
names(PerCapitaIncome)[5]<-"PCI_Label"
names(PerCapitaIncome)[7]<-"pci"
PerCapitaIncome <- PerCapitaIncome[, -c(1,5,6,8)]
#BEA Regional Income Data: Current Transfer receipts of individuals from Governments
##API error, this data is not loading.
beaPercapita_Current_Transfer <- list(
'UserID' = beaKey ,
'Method' = 'GetData',
'datasetname' = 'RegionalIncome',
'TableName' = 'CA30' ,
'LineCode' = '130',
'Year' = '2012, 2015' ,
'GeoFips' = 'COUNTY' ,
'ResultFormat' = 'json'
);
beaPercapita_Current_Transfer <- beaGet(beaPercapita_Current_Transfer, asString = T, asTable = F)
PerCapitaCurrentTransfer <- jsonlite::fromJSON(beaPercapita_Current_Transfer)$BEAAPI$Results$Data %>%
mutate(DataValue = ifelse(DataValue == '(NA)', NA, DataValue),
DataValue = as.numeric(DataValue)) %>%
rename(Year = TimePeriod, PCCT = DataValue) %>%
mutate(Year = as.numeric(Year))
names(PerCapitaCurrentTransfer)[5]<-"PCCT_Label"
names(PerCapitaCurrentTransfer)[7]<-"pcct"
PerCapitaCurrentTransfer <- PerCapitaCurrentTransfer[, -c(1,5,6,8)]
#BEA Regional Income Data: Adjustment for Residence equals the inflows to that county minus the outflows from that county
beaAdjustment_Residence <- list(
'UserID' = beaKey ,
'Method' = 'GetData',
'datasetname' = 'RegionalIncome',
'TableName' = 'CA91' ,
'LineCode' = '30',
'Year' = '2012, 2015' ,
'GeoFips' = 'COUNTY' ,
'ResultFormat' = 'json'
);
beaAdjustment_Residence <- beaGet(beaAdjustment_Residence, asString = T, asTable = F)
AdjustmentResidence <- jsonlite::fromJSON(beaAdjustment_Residence)$BEAAPI$Results$Data %>%
mutate(DataValue = ifelse(DataValue == '(NA)', NA, DataValue),
DataValue = as.numeric(DataValue)) %>%
rename(Year = TimePeriod, Adj_res = DataValue) %>%
mutate(Year = as.numeric(Year))
names(AdjustmentResidence)[5]<-"Adj_res_Label"
names(AdjustmentResidence)[7]<-"adj_res"
AdjustmentResidence <- AdjustmentResidence[, -c(1,5,6,8)]
View(Population)
View(PerCapitaIncome)
View(PerCapitaCurrentTransfer)
View(election_df2)
View(AdjustmentResidence)
#Merging all BEA dataframes
bea_df <- merge(Population, PerCapitaIncome, by = c('GeoFips', 'Year', 'GeoName'), all=T)
bea_df <- merge(bea_df, PerCapitaCurrentTransfer, by = c('GeoFips', 'Year', 'GeoName'), all=T)
bea_df <- merge(bea_df, AdjustmentResidence, by = c('GeoFips', 'Year', 'GeoName'), all=T)
names(bea_df)[names(bea_df)=="GeoFips"] <- "county.fips"
bea_df$county.fips <- as.numeric(bea_df$county.fips)
View(bea_df)
#Removing all previous untidy dataframes
rm(beaPop, beaPCI, beaPercapita_Current_Transfer, beaAdjustment_Residence)
rm(Population, PerCapitaIncome, PerCapitaCurrentTransfer, AdjustmentResidence)
## Custom function
geo_seperate <- function(text, digit = 1) {
# This function is to use the text in the column GeoName and seperate them into two parts; the one with the state and the one with counties. Then use dplyr to mutate the columns respectivly
temp.text <- str_split(text, ", ") %>% unlist() %>%
# Split at the comma. and force the text to take between 1:3 parts
str_replace_all("[*]", "")
if (length(temp.text) == 3) {
# Correcting the state and county names if more than one comma in their names
temp.text <- c(paste(temp.text[1:2], collapse = ", "), temp.text[3])
}
if (length(temp.text) == 1) {
return(NA) # For those with only US or state names
} else {
return(temp.text[digit])
}
}
bea_df %<>%
rowwise() %>%
mutate(county = geo_seperate(GeoName, 1),
state = geo_seperate(GeoName, 2)) %>%
select(county.fips, Year, GeoName, state, county, everything())
# Only need to filter out the NAs from state and county now
bea_df <- bea_df %>% filter(county != "NA")
bea_df$county <- tolower(bea_df$county) #Changed the county names to lowercase
#Rename the Year variable to year.
names(bea_df)[names(bea_df)=="Year"] <- "year"
View(bea_df)
bea_df <- bea_df %>%
arrange(county.fips, year) %>%
group_by(county.fips) %>%
mutate(PCI_lag = lag(PCI)) %>%
mutate(Pop_lag = lag(Pop)) %>%
mutate(PCCT_lag = lag(PCCT)) %>%
mutate(Adj_res_lag = lag(Adj_res)) %>%
filter(year %% 2 == 1)
bea_df <- bea_df %>%
arrange(county.fips, year) %>%
group_by(county.fips) %>%
mutate(PCI_lag = lag(pci)) %>%
mutate(Pop_lag = lag(pop)) %>%
mutate(PCCT_lag = lag(pcct)) %>%
mutate(Adj_res_lag = lag(adj_res)) %>%
filter(year %% 2 == 1)
bea_df <- bea_df %>%
arrange(county.fips, year) %>%
group_by(county.fips) %>%
mutate(pci_lag = lag(pci)) %>%
mutate(pop_lag = lag(pop)) %>%
mutate(pcct_lag = lag(pcct)) %>%
mutate(adj_res_lag = lag(adj_res)) %>%
filter(year %% 2 == 1)
change for all the economic variables from BEA
bea_df$pci_gro <- (bea_df$pci - bea_df$pci_lag)/bea_df$pci_lag
bea_df$pcct_gro <- (bea_df$pcct - bea_df$pcct_lag)/bea_df$pcct_lag
bea_df$adj_gro <- (bea_df$adj_res - bea_df$adj_res_lag)/bea_df$adj_res_lag
#Calculate the one year percent change for all the economic variables from BEA
bea_df$pci_gro <- (bea_df$pci - bea_df$pci_lag)/bea_df$pci_lag
bea_df$pcct_gro <- (bea_df$pcct - bea_df$pcct_lag)/bea_df$pcct_lag
bea_df$adj_gro <- (bea_df$adj_res - bea_df$adj_res_lag)/bea_df$adj_res_lag
View(bea_df)
#Calculate the one year percent change for all the economic variables from BEA
bea_df$pci_gro <- (bea_df$pci - bea_df$pci_lag)/bea_df$pci_lag
bea_df$pcct_gro <- (bea_df$pcct - bea_df$pcct_lag)/bea_df$pcct_lag
bea_df$adj_gro <- (bea_df$adj_res - bea_df$adj_res_lag)/bea_df$adj_res_lag
bea_df <- bea_df %>%
arrange(county.fips, year) %>%
group_by(county.fips) %>%
mutate(pci_lag = lag(pci)) %>%
mutate(pop_lag = lag(pop)) %>%
mutate(pcct_lag = lag(pcct)) %>%
mutate(adj_res_lag = lag(adj_res)) %>%
filter(year %% 2 == 1)
bea_df$pci_gro <- (bea_df$pci - bea_df$pci_lag)/bea_df$pci_lag
bea_df$pcct_gro <- (bea_df$pcct - bea_df$pcct_lag)/bea_df$pcct_lag
bea_df$adj_gro <- (bea_df$adj_res - bea_df$adj_res_lag)/bea_df$adj_res_lag
View(bea_df)
beaPop <- list(
'UserID' = beaKey ,
'Method' = 'GetData',
'datasetname' = 'RegionalIncome',
'TableName' = 'CA1' ,
'LineCode' = '2',
'Year' = '2012, 2015' ,
'GeoFips' = 'COUNTY' ,
'ResultFormat' = 'json'
)
beaPop <- beaGet(beaPop, asString = T, asTable = F)
Population <- jsonlite::fromJSON(beaPop)$BEAAPI$Results$Data %>%
mutate(DataValue = ifelse(DataValue == '(NA)', NA, DataValue),
DataValue = as.numeric(DataValue)) %>%
rename(Year = TimePeriod, Pop = DataValue) %>%
mutate(Year = as.numeric(Year))
names(Population)[5]<-"Pop_Label"
names(Population)[7]<-"pop"
Population <- Population[, -c(1,5,6,8)]
#BEA Regional Income Data: Per Capita Income by county
beaPCI <- list(
'UserID' = beaKey ,
'Method' = 'GetData',
'datasetname' = 'RegionalIncome',
'TableName' = 'CA1' ,
'LineCode' = '3',
'Year' = '2012, 2015' ,
'GeoFips' = 'COUNTY' ,
'ResultFormat' = 'json'
);
beaPCI <- beaGet(beaPCI, asString = T, asTable = F)
PerCapitaIncome <- jsonlite::fromJSON(beaPCI)$BEAAPI$Results$Data %>%
mutate(DataValue = ifelse(DataValue == '(NA)', NA, DataValue),
DataValue = as.numeric(DataValue)) %>%
rename(Year = TimePeriod, PCI = DataValue) %>%
mutate(Year = as.numeric(Year))
names(PerCapitaIncome)[5]<-"PCI_Label"
names(PerCapitaIncome)[7]<-"pci"
PerCapitaIncome <- PerCapitaIncome[, -c(1,5,6,8)]
#BEA Regional Income Data: Current Transfer receipts of individuals from Governments
##API error, this data is not loading.
beaPercapita_Current_Transfer <- list(
'UserID' = beaKey ,
'Method' = 'GetData',
'datasetname' = 'RegionalIncome',
'TableName' = 'CA30' ,
'LineCode' = '130',
'Year' = '2012, 2015' ,
'GeoFips' = 'COUNTY' ,
'ResultFormat' = 'json'
);
beaPercapita_Current_Transfer <- beaGet(beaPercapita_Current_Transfer, asString = T, asTable = F)
PerCapitaCurrentTransfer <- jsonlite::fromJSON(beaPercapita_Current_Transfer)$BEAAPI$Results$Data %>%
mutate(DataValue = ifelse(DataValue == '(NA)', NA, DataValue),
DataValue = as.numeric(DataValue)) %>%
rename(Year = TimePeriod, PCCT = DataValue) %>%
mutate(Year = as.numeric(Year))
names(PerCapitaCurrentTransfer)[5]<-"PCCT_Label"
names(PerCapitaCurrentTransfer)[7]<-"pcct"
PerCapitaCurrentTransfer <- PerCapitaCurrentTransfer[, -c(1,5,6,8)]
#BEA Regional Income Data: Adjustment for Residence equals the inflows to that county minus the outflows from that county
beaAdjustment_Residence <- list(
'UserID' = beaKey ,
'Method' = 'GetData',
'datasetname' = 'RegionalIncome',
'TableName' = 'CA91' ,
'LineCode' = '30',
'Year' = '2012, 2015' ,
'GeoFips' = 'COUNTY' ,
'ResultFormat' = 'json'
);
beaAdjustment_Residence <- beaGet(beaAdjustment_Residence, asString = T, asTable = F)
AdjustmentResidence <- jsonlite::fromJSON(beaAdjustment_Residence)$BEAAPI$Results$Data %>%
mutate(DataValue = ifelse(DataValue == '(NA)', NA, DataValue),
DataValue = as.numeric(DataValue)) %>%
rename(Year = TimePeriod, Adj_res = DataValue) %>%
mutate(Year = as.numeric(Year))
names(AdjustmentResidence)[5]<-"Adj_res_Label"
names(AdjustmentResidence)[7]<-"adj_res"
AdjustmentResidence <- AdjustmentResidence[, -c(1,5,6,8)]
#Merging all BEA dataframes
bea_df <- merge(Population, PerCapitaIncome, by = c('GeoFips', 'Year', 'GeoName'), all=T)
bea_df <- merge(bea_df, PerCapitaCurrentTransfer, by = c('GeoFips', 'Year', 'GeoName'), all=T)
bea_df <- merge(bea_df, AdjustmentResidence, by = c('GeoFips', 'Year', 'GeoName'), all=T)
names(bea_df)[names(bea_df)=="GeoFips"] <- "county.fips"
bea_df$county.fips <- as.numeric(bea_df$county.fips)
## Custom function
geo_seperate <- function(text, digit = 1) {
# This function is to use the text in the column GeoName and seperate them into two parts; the one with the state and the one with counties. Then use dplyr to mutate the columns respectivly
temp.text <- str_split(text, ", ") %>% unlist() %>%
# Split at the comma. and force the text to take between 1:3 parts
str_replace_all("[*]", "")
if (length(temp.text) == 3) {
# Correcting the state and county names if more than one comma in their names
temp.text <- c(paste(temp.text[1:2], collapse = ", "), temp.text[3])
}
if (length(temp.text) == 1) {
return(NA) # For those with only US or state names
} else {
return(temp.text[digit])
}
}
bea_df %<>%
rowwise() %>%
mutate(county = geo_seperate(GeoName, 1),
state = geo_seperate(GeoName, 2)) %>%
select(county.fips, Year, GeoName, state, county, everything())
# Only need to filter out the NAs from state and county now
bea_df <- bea_df %>% filter(county != "NA")
bea_df$county <- tolower(bea_df$county) #Changed the county names to lowercase
#Rename the Year variable to year.
names(bea_df)[names(bea_df)=="Year"] <- "year"
bea_df <- bea_df %>%
arrange(county.fips, year) %>%
group_by(county.fips) %>%
mutate(pci_lag = lag(pci)) %>%
mutate(pop_lag = lag(pop)) %>%
mutate(pcct_lag = lag(pcct)) %>%
mutate(adj_res_lag = lag(adj_res)) %>%
filter(year %% 2 == 1)
#Calculate the one year percent change for all the economic variables from BEA
bea_df$pci_gro <- (bea_df$pci - bea_df$pci_lag)/bea_df$pci_lag
bea_df$pcct_gro <- (bea_df$pcct - bea_df$pcct_lag)/bea_df$pcct_lag
bea_df$adj_gro <- (bea_df$adj_res - bea_df$adj_res_lag)/bea_df$adj_res_lag
View(bea_df)
View(bea_df)
bea_df <- bea_df[c(1,2,14:16)]
bea_df %<>%
rowwise() %>%
mutate(county = geo_seperate(GeoName, 1),
state = geo_seperate(GeoName, 2)) %>%
select(county.fips, Year, GeoName, state, county, everything())
# Only need to filter out the NAs from state and county now
bea_df <- bea_df %>% filter(county != "NA")
bea_df$county <- tolower(bea_df$county)
names(bea_df)[names(bea_df)=="Year"] <- "year"

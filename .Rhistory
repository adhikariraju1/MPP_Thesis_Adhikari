election_df$state <- as.character(election_df$state)
election_df <- election_df[, -c(3,4,6,8)]
#Removing untidy dataframes from the environment
rm(voteshare_new, voteshare_recent, voteshare_recent_rep, voteshare_recent_dem)
#subsetting only the necessary columns
election_df <- election_df[c(1:4,7)]
#BEA Regional Income Data: Population by county
##2016 Data is not available
beaPop <- list(
'UserID' = beaKey ,
'Method' = 'GetData',
'datasetname' = 'RegionalIncome',
'TableName' = 'CA1' ,
'LineCode' = '2',
'Year' = '1991, 1992, 1995, 1996, 1999, 2000, 2003, 2004, 2007, 2008, 2011, 2012' ,
'GeoFips' = 'COUNTY' ,
'ResultFormat' = 'json'
)
beaPop <- beaGet(beaPop, asString = T, asTable = F)
Population <- jsonlite::fromJSON(beaPop)$BEAAPI$Results$Data %>%
mutate(DataValue = ifelse(DataValue == '(NA)', NA, DataValue),
DataValue = as.numeric(DataValue)) %>%
rename(Year = TimePeriod, Pop = DataValue) %>%
mutate(Year = as.numeric(Year))
names(Population)[5]<-"Pop_Label"
Population <- Population[, -c(1,5,6,8)]
#BEA Regional Income Data: Per Capita Income by county
beaPCI <- list(
'UserID' = beaKey ,
'Method' = 'GetData',
'datasetname' = 'RegionalIncome',
'TableName' = 'CA1' ,
'LineCode' = '3',
'Year' = '1991, 1992, 1995, 1996, 1999, 2000, 2003, 2004, 2007, 2008, 2011, 2012' ,
'GeoFips' = 'COUNTY' ,
'ResultFormat' = 'json'
);
beaPCI <- beaGet(beaPCI, asString = T, asTable = F)
PerCapitaIncome <- jsonlite::fromJSON(beaPCI)$BEAAPI$Results$Data %>%
mutate(DataValue = ifelse(DataValue == '(NA)', NA, DataValue),
DataValue = as.numeric(DataValue)) %>%
rename(Year = TimePeriod, PCI = DataValue) %>%
mutate(Year = as.numeric(Year))
names(PerCapitaIncome)[5]<-"PCI_Label"
PerCapitaIncome <- PerCapitaIncome[, -c(1,5,6,8)]
#The data is available until 2015 only. Let's see what can be done to match the election data.
#BEA Regional Income Data: Current Transfer receipts of individuals from Governments
##API error, this data is not loading.
beaPercapita_Current_Transfer <- list(
'UserID' = beaKey ,
'Method' = 'GetData',
'datasetname' = 'RegionalIncome',
'TableName' = 'CA30' ,
'LineCode' = '130',
'Year' = '1991, 1992, 1995, 1996, 1999, 2000, 2003, 2004, 2007, 2008, 2011, 2012' ,
'GeoFips' = 'COUNTY' ,
'ResultFormat' = 'json'
);
beaPercapita_Current_Transfer <- beaGet(beaPercapita_Current_Transfer, asString = T, asTable = F)
PerCapitaCurrentTransfer <- jsonlite::fromJSON(beaPercapita_Current_Transfer)$BEAAPI$Results$Data %>%
mutate(DataValue = ifelse(DataValue == '(NA)', NA, DataValue),
DataValue = as.numeric(DataValue)) %>%
rename(Year = TimePeriod, PCCT = DataValue) %>%
mutate(Year = as.numeric(Year))
names(PerCapitaCurrentTransfer)[5]<-"PCCT_Label"
PerCapitaCurrentTransfer <- PerCapitaCurrentTransfer[, -c(1,5,6,8)]
#BEA Regional Income Data: Adjustment for Residence equals the inflows to that county minus the outflows from that county
beaAdjustment_Residence <- list(
'UserID' = beaKey ,
'Method' = 'GetData',
'datasetname' = 'RegionalIncome',
'TableName' = 'CA91' ,
'LineCode' = '30',
'Year' = '1991, 1992, 1995, 1996, 1999, 2000, 2003, 2004, 2007, 2008, 2011, 2012' ,
'GeoFips' = 'COUNTY' ,
'ResultFormat' = 'json'
);
beaAdjustment_Residence <- beaGet(beaAdjustment_Residence, asString = T, asTable = F)
AdjustmentResidence <- jsonlite::fromJSON(beaAdjustment_Residence)$BEAAPI$Results$Data %>%
mutate(DataValue = ifelse(DataValue == '(NA)', NA, DataValue),
DataValue = as.numeric(DataValue)) %>%
rename(Year = TimePeriod, Adj_res = DataValue) %>%
mutate(Year = as.numeric(Year))
names(AdjustmentResidence)[5]<-"Adj_res_Label"
AdjustmentResidence <- AdjustmentResidence[, -c(1,5,6,8)]
#Merging all BEA dataframes
bea_df <- merge(Population, PerCapitaIncome, by = c('GeoFips', 'Year', 'GeoName'), all=T)
bea_df <- merge(bea_df, PerCapitaCurrentTransfer, by = c('GeoFips', 'Year', 'GeoName'), all=T)
bea_df <- merge(bea_df, AdjustmentResidence, by = c('GeoFips', 'Year', 'GeoName'), all=T)
names(bea_df)[names(bea_df)=="GeoFips"] <- "county.fips"
bea_df$county.fips <- as.numeric(bea_df$county.fips)
#Removing all previous untidy dataframes
rm(beaPop, beaPCI, beaPercapita_Current_Transfer, beaAdjustment_Residence)
rm(Population, PerCapitaIncome, PerCapitaCurrentTransfer, AdjustmentResidence)
## Custom function
geo_seperate <- function(text, digit = 1) {
# This function is to use the text in the column GeoName and seperate them into two parts; the one with the state and the one with counties. Then use dplyr to mutate the columns respectivly
temp.text <- str_split(text, ", ") %>% unlist() %>%
# Split at the comma. and force the text to take between 1:3 parts
str_replace_all("[*]", "")
if (length(temp.text) == 3) {
# Correcting the state and county names if more than one comma in their names
temp.text <- c(paste(temp.text[1:2], collapse = ", "), temp.text[3])
}
if (length(temp.text) == 1) {
return(NA) # For those with only US or state names
} else {
return(temp.text[digit])
}
}
bea_df %<>%
rowwise() %>%
mutate(county = geo_seperate(GeoName, 1),
state = geo_seperate(GeoName, 2)) %>%
select(county.fips, Year, GeoName, state, county, everything())
# Only need to filter out the NAs from state and county now
bea_df <- bea_df %>% filter(county != "NA")
bea_df$county <- tolower(bea_df$county) #Changed the county names to lowercase
#Rename the Year variable to year.
names(bea_df)[names(bea_df)=="Year"] <- "year"
bea_df <- bea_df %>%
arrange(county.fips, year) %>%
group_by(county.fips) %>%
mutate(PCI_lag = lag(PCI)) %>%
mutate(Pop_lag = lag(Pop)) %>%
mutate(PCCT_lag = lag(PCCT)) %>%
mutate(Adj_res_lag = lag(Adj_res)) %>%
filter(year %% 2 == 0)
#Calculate the one year percent change for all the economic variables from BEA
bea_df$PCI_gro <- (bea_df$PCI - bea_df$PCI_lag)/bea_df$PCI_lag
bea_df$PCCT_gro <- (bea_df$PCCT - bea_df$PCCT_lag)/bea_df$PCCT_lag
bea_df$Adj_gro <- (bea_df$Adj_res - bea_df$Adj_res_lag)/bea_df$Adj_res_lag
#Voteshare Data (1992-2016)
voteshare_new <- read.table(file = 'full-us-presidential-counties-1960-2016.tsv', sep = '\t', header = TRUE)
voteshare_recent <- voteshare_new[voteshare_new$year >= "1992",] #Choosing years after 1992
voteshare_recent <- voteshare_recent[voteshare_recent$year < "2016",] #Removing year 2016
#Separating the democrats data and republicans data into separate dataframes
voteshare_recent_rep <- voteshare_recent [voteshare_recent$party == "R", ]
names(voteshare_recent_rep)[names(voteshare_recent_rep)=="vote.percent"] <- "rep.percent"
names(voteshare_recent_rep)[names(voteshare_recent_rep)=="vote.count"] <- "rep.count"
names(voteshare_recent_rep)[names(voteshare_recent_rep)=="is.national.winner"] <- "is.rep.nat.winner"
names(voteshare_recent_rep)[names(voteshare_recent_rep)=="national.party.count"] <- "nat.rep.count"
names(voteshare_recent_rep)[names(voteshare_recent_rep)=="national.party.percent"] <- "nat.rep.percent"
voteshare_recent_rep$party <- NULL
voteshare_recent_dem <- voteshare_recent [voteshare_recent$party == "D", ]
names(voteshare_recent_dem)[names(voteshare_recent_dem)=="vote.percent"] <- "dem.percent"
names(voteshare_recent_dem)[names(voteshare_recent_dem)=="vote.count"] <- "dem.count"
names(voteshare_recent_dem)[names(voteshare_recent_dem)=="is.national.winner"] <- "is.dem.nat.winner"
names(voteshare_recent_dem)[names(voteshare_recent_dem)=="national.party.count"] <- "nat.dem.count"
names(voteshare_recent_dem)[names(voteshare_recent_dem)=="national.party.percent"] <- "nat.dem.percent"
voteshare_recent_dem$party <- NULL
#Merging the two dataframes
election_df <- merge(voteshare_recent_rep, voteshare_recent_dem, all = T)
#Renaming column names to merge them with other data later
names(election_df)[names(election_df)=="state.abb"] <- "state"
names(election_df)[names(election_df)=="county.name"] <- "county"
#Converting the county and state columns from factors into strings so that they can be merged with other dataframes later
election_df$county <- as.character(election_df$county)
election_df$state <- as.character(election_df$state)
election_df <- election_df[, -c(3,4,6,8)]
#Removing untidy dataframes from the environment
rm(voteshare_new, voteshare_recent, voteshare_recent_rep, voteshare_recent_dem)
#subsetting only the necessary columns
election_df <- election_df[c(1:4,7)]
#BEA Regional Income Data: Population by county
##2016 Data is not available
beaPop <- list(
'UserID' = beaKey ,
'Method' = 'GetData',
'datasetname' = 'RegionalIncome',
'TableName' = 'CA1' ,
'LineCode' = '2',
'Year' = '1991, 1992, 1995, 1996, 1999, 2000, 2003, 2004, 2007, 2008, 2011, 2012' ,
'GeoFips' = 'COUNTY' ,
'ResultFormat' = 'json'
)
beaPop <- beaGet(beaPop, asString = T, asTable = F)
Population <- jsonlite::fromJSON(beaPop)$BEAAPI$Results$Data %>%
mutate(DataValue = ifelse(DataValue == '(NA)', NA, DataValue),
DataValue = as.numeric(DataValue)) %>%
rename(Year = TimePeriod, Pop = DataValue) %>%
mutate(Year = as.numeric(Year))
names(Population)[5]<-"Pop_Label"
Population <- Population[, -c(1,5,6,8)]
#BEA Regional Income Data: Per Capita Income by county
beaPCI <- list(
'UserID' = beaKey ,
'Method' = 'GetData',
'datasetname' = 'RegionalIncome',
'TableName' = 'CA1' ,
'LineCode' = '3',
'Year' = '1991, 1992, 1995, 1996, 1999, 2000, 2003, 2004, 2007, 2008, 2011, 2012' ,
'GeoFips' = 'COUNTY' ,
'ResultFormat' = 'json'
);
beaPCI <- beaGet(beaPCI, asString = T, asTable = F)
PerCapitaIncome <- jsonlite::fromJSON(beaPCI)$BEAAPI$Results$Data %>%
mutate(DataValue = ifelse(DataValue == '(NA)', NA, DataValue),
DataValue = as.numeric(DataValue)) %>%
rename(Year = TimePeriod, PCI = DataValue) %>%
mutate(Year = as.numeric(Year))
names(PerCapitaIncome)[5]<-"PCI_Label"
PerCapitaIncome <- PerCapitaIncome[, -c(1,5,6,8)]
#The data is available until 2015 only. Let's see what can be done to match the election data.
#BEA Regional Income Data: Current Transfer receipts of individuals from Governments
##API error, this data is not loading.
beaPercapita_Current_Transfer <- list(
'UserID' = beaKey ,
'Method' = 'GetData',
'datasetname' = 'RegionalIncome',
'TableName' = 'CA30' ,
'LineCode' = '130',
'Year' = '1991, 1992, 1995, 1996, 1999, 2000, 2003, 2004, 2007, 2008, 2011, 2012' ,
'GeoFips' = 'COUNTY' ,
'ResultFormat' = 'json'
);
beaPercapita_Current_Transfer <- beaGet(beaPercapita_Current_Transfer, asString = T, asTable = F)
PerCapitaCurrentTransfer <- jsonlite::fromJSON(beaPercapita_Current_Transfer)$BEAAPI$Results$Data %>%
mutate(DataValue = ifelse(DataValue == '(NA)', NA, DataValue),
DataValue = as.numeric(DataValue)) %>%
rename(Year = TimePeriod, PCCT = DataValue) %>%
mutate(Year = as.numeric(Year))
names(PerCapitaCurrentTransfer)[5]<-"PCCT_Label"
PerCapitaCurrentTransfer <- PerCapitaCurrentTransfer[, -c(1,5,6,8)]
#BEA Regional Income Data: Adjustment for Residence equals the inflows to that county minus the outflows from that county
beaAdjustment_Residence <- list(
'UserID' = beaKey ,
'Method' = 'GetData',
'datasetname' = 'RegionalIncome',
'TableName' = 'CA91' ,
'LineCode' = '30',
'Year' = '1991, 1992, 1995, 1996, 1999, 2000, 2003, 2004, 2007, 2008, 2011, 2012' ,
'GeoFips' = 'COUNTY' ,
'ResultFormat' = 'json'
);
beaAdjustment_Residence <- beaGet(beaAdjustment_Residence, asString = T, asTable = F)
AdjustmentResidence <- jsonlite::fromJSON(beaAdjustment_Residence)$BEAAPI$Results$Data %>%
mutate(DataValue = ifelse(DataValue == '(NA)', NA, DataValue),
DataValue = as.numeric(DataValue)) %>%
rename(Year = TimePeriod, Adj_res = DataValue) %>%
mutate(Year = as.numeric(Year))
names(AdjustmentResidence)[5]<-"Adj_res_Label"
AdjustmentResidence <- AdjustmentResidence[, -c(1,5,6,8)]
#Merging all BEA dataframes
bea_df <- merge(Population, PerCapitaIncome, by = c('GeoFips', 'Year', 'GeoName'), all=T)
bea_df <- merge(bea_df, PerCapitaCurrentTransfer, by = c('GeoFips', 'Year', 'GeoName'), all=T)
bea_df <- merge(bea_df, AdjustmentResidence, by = c('GeoFips', 'Year', 'GeoName'), all=T)
names(bea_df)[names(bea_df)=="GeoFips"] <- "county.fips"
bea_df$county.fips <- as.numeric(bea_df$county.fips)
#Removing all previous untidy dataframes
rm(beaPop, beaPCI, beaPercapita_Current_Transfer, beaAdjustment_Residence)
rm(Population, PerCapitaIncome, PerCapitaCurrentTransfer, AdjustmentResidence)
## Custom function
geo_seperate <- function(text, digit = 1) {
# This function is to use the text in the column GeoName and seperate them into two parts; the one with the state and the one with counties. Then use dplyr to mutate the columns respectivly
temp.text <- str_split(text, ", ") %>% unlist() %>%
# Split at the comma. and force the text to take between 1:3 parts
str_replace_all("[*]", "")
if (length(temp.text) == 3) {
# Correcting the state and county names if more than one comma in their names
temp.text <- c(paste(temp.text[1:2], collapse = ", "), temp.text[3])
}
if (length(temp.text) == 1) {
return(NA) # For those with only US or state names
} else {
return(temp.text[digit])
}
}
bea_df %<>%
rowwise() %>%
mutate(county = geo_seperate(GeoName, 1),
state = geo_seperate(GeoName, 2)) %>%
select(county.fips, Year, GeoName, state, county, everything())
# Only need to filter out the NAs from state and county now
bea_df <- bea_df %>% filter(county != "NA")
bea_df$county <- tolower(bea_df$county) #Changed the county names to lowercase
#Rename the Year variable to year.
names(bea_df)[names(bea_df)=="Year"] <- "year"
bea_df <- bea_df %>%
arrange(county.fips, year) %>%
group_by(county.fips) %>%
mutate(PCI_lag = lag(PCI)) %>%
mutate(Pop_lag = lag(Pop)) %>%
mutate(PCCT_lag = lag(PCCT)) %>%
mutate(Adj_res_lag = lag(Adj_res)) %>%
filter(year %% 2 == 0)
#Calculate the one year percent change for all the economic variables from BEA
bea_df$PCI_gro <- (bea_df$PCI - bea_df$PCI_lag)/bea_df$PCI_lag
bea_df$PCCT_gro <- (bea_df$PCCT - bea_df$PCCT_lag)/bea_df$PCCT_lag
bea_df$Adj_gro <- (bea_df$Adj_res - bea_df$Adj_res_lag)/bea_df$Adj_res_lag
View(bea_df)
bea_df <- bea_df[c(1,2,4:6,14:16)]
View(election_df)
View(bea_df)
#BLS Data on Unemployment by county, clean data, remove unnecessary rows
unemp91 <- read_excel('laucnty91.xlsx')
unemp91 <- separate(unemp91, County, into = c("County.name", "State"), sep=",")
unemp91 <- unemp91[-c(3218:3220), ]
unemp92 <- read_excel('laucnty92.xlsx')
unemp92 <- separate(unemp92, County, into = c("County.name", "State"), sep=",")
unemp92 <- unemp92[-c(3217:3219), ]
unemp95 <- read_excel('laucnty95.xlsx')
unemp95 <- separate(unemp95, County, into = c("County.name", "State"), sep=",")
unemp95 <- unemp95[-c(3219:3221), ]
unemp96 <- read_excel('laucnty96.xlsx')
unemp96 <- separate(unemp96, County, into = c("County.name", "State"), sep=",")
unemp96 <- unemp96[-c(3218:3220), ]
unemp99 <- read_excel('laucnty99.xlsx')
unemp99 <- separate(unemp99, County, into = c("County.name", "State"), sep=",")
unemp99 <- unemp99[-c(3219:3221), ]
unemp00 <- read_excel('laucnty00.xlsx')
unemp00 <- separate(unemp00, County, into = c("County.name", "State"), sep=",")
unemp00 <- unemp00[-c(3218:3220), ]
unemp03 <- read_excel('laucnty03.xlsx')
unemp03 <- separate(unemp03, County, into = c("County.name", "State"), sep=",")
unemp03 <- unemp03[-c(3219:3221), ]
unemp04 <- read_excel('laucnty04.xlsx')
unemp04 <- separate(unemp04, County, into = c("County.name", "State"), sep=",")
unemp04 <- unemp04[-c(3218:3220), ]
unemp07 <- read_excel('laucnty07.xlsx')
unemp07 <- separate(unemp07, County, into = c("County.name", "State"), sep=",")
unemp07 <- unemp07[-c(3219:3221), ]
unemp08 <- read_excel('laucnty08.xlsx')
unemp08 <- separate(unemp08, County, into = c("County.name", "State"), sep=",")
unemp08 <- unemp08[-c(3218:3220), ]
unemp11 <- read_excel('laucnty11.xlsx')
unemp11 <- separate(unemp11, County, into = c("County.name", "State"), sep=",")
unemp11 <- unemp11[-c(3221:3223), ]
unemp12 <- read_excel('laucnty12.xlsx')
unemp12 <- separate(unemp12, County, into = c("County.name", "State"), sep=",")
unemp12 <- unemp12[-c(3220:3222), ]
#Combine all the dataframes from different years into one dataframe
unemployment_df <- bind_rows(unemp91, unemp92, unemp95, unemp96, unemp99, unemp00, unemp03, unemp04, unemp07,  unemp08, unemp11, unemp12, .id = NULL)
names(unemployment_df)[names(unemployment_df)=="County.name"] <- "county"
names(unemployment_df)[names(unemployment_df)=="State"] <- "state"
names(unemployment_df)[names(unemployment_df)=="County Code"] <- "county.fips"
names(unemployment_df)[names(unemployment_df)=="State FIPS Code"] <- "state.fips"
names(unemployment_df)[names(unemployment_df)=="Year"] <- "year"
unemployment_df$county <- strsplit(unemployment_df$county, " County") #Remove the word County from the county names
unemployment_df$county <- tolower(unemployment_df$county) #Changed the county names to lowercase
View(unemployment_df)
unemployment_df <- unite(unemployment_df, state.fips, county.fips, col ="county.fips", sep="") #Combine two columns to make them into one.
#The states that appeared as NA in this dataframe represented DC, hence the NAs will be changed to DC
unemployment_df <- replace_na(unemployment_df, list(state="DC", unemployment_df$state))
#Converting from character to numeric for merging purposes
unemployment_df$county.fips <- as.numeric(unemployment_df$county.fips)
unemployment_df$year <- as.numeric(unemployment_df$year)
#Remove untidy dataframes from the environment
rm(unemp91, unemp92, unemp95, unemp96, unemp99, unemp00, unemp03, unemp04, unemp07,  unemp08, unemp11, unemp12)
# There is an extra space in front or back of the state names. Need to remove them
unemployment_df <- unemployment_df %>%
mutate(state = str_replace_all(state, " ", "")) %>%
filter(state != "AK" & state != "PR")
#Rename the variable "Unemployment" to "unemp"
names(unemployment_df)[names(unemployment_df)=="Unemployment Rate"] <- "unemp"
#Do the lag of unemloyment
unemployment_df <- unemployment_df %>%
arrange(county.fips, year) %>%
group_by(county.fips) %>%
mutate(unemp_lag = lag(unemp)) %>%
filter(year %% 2 == 0)
#Calculate the one year percent change for unemployment
unemployment_df$unemp_gro <- (unemployment_df$unemp - unemployment_df$unemp_lag)/unemployment_df$unemp_lag
#BLS Data on Unemployment by county, clean data, remove unnecessary rows
unemp91 <- read_excel('laucnty91.xlsx')
unemp91 <- separate(unemp91, County, into = c("County.name", "State"), sep=",")
unemp91 <- unemp91[-c(3218:3220), ]
unemp92 <- read_excel('laucnty92.xlsx')
unemp92 <- separate(unemp92, County, into = c("County.name", "State"), sep=",")
unemp92 <- unemp92[-c(3217:3219), ]
unemp95 <- read_excel('laucnty95.xlsx')
unemp95 <- separate(unemp95, County, into = c("County.name", "State"), sep=",")
unemp95 <- unemp95[-c(3219:3221), ]
unemp96 <- read_excel('laucnty96.xlsx')
unemp96 <- separate(unemp96, County, into = c("County.name", "State"), sep=",")
unemp96 <- unemp96[-c(3218:3220), ]
unemp99 <- read_excel('laucnty99.xlsx')
unemp99 <- separate(unemp99, County, into = c("County.name", "State"), sep=",")
unemp99 <- unemp99[-c(3219:3221), ]
unemp00 <- read_excel('laucnty00.xlsx')
unemp00 <- separate(unemp00, County, into = c("County.name", "State"), sep=",")
unemp00 <- unemp00[-c(3218:3220), ]
unemp03 <- read_excel('laucnty03.xlsx')
unemp03 <- separate(unemp03, County, into = c("County.name", "State"), sep=",")
unemp03 <- unemp03[-c(3219:3221), ]
unemp04 <- read_excel('laucnty04.xlsx')
unemp04 <- separate(unemp04, County, into = c("County.name", "State"), sep=",")
unemp04 <- unemp04[-c(3218:3220), ]
unemp07 <- read_excel('laucnty07.xlsx')
unemp07 <- separate(unemp07, County, into = c("County.name", "State"), sep=",")
unemp07 <- unemp07[-c(3219:3221), ]
unemp08 <- read_excel('laucnty08.xlsx')
unemp08 <- separate(unemp08, County, into = c("County.name", "State"), sep=",")
unemp08 <- unemp08[-c(3218:3220), ]
unemp11 <- read_excel('laucnty11.xlsx')
unemp11 <- separate(unemp11, County, into = c("County.name", "State"), sep=",")
unemp11 <- unemp11[-c(3221:3223), ]
unemp12 <- read_excel('laucnty12.xlsx')
unemp12 <- separate(unemp12, County, into = c("County.name", "State"), sep=",")
unemp12 <- unemp12[-c(3220:3222), ]
#Combine all the dataframes from different years into one dataframe
unemployment_df <- bind_rows(unemp91, unemp92, unemp95, unemp96, unemp99, unemp00, unemp03, unemp04, unemp07,  unemp08, unemp11, unemp12, .id = NULL)
names(unemployment_df)[names(unemployment_df)=="County.name"] <- "county"
names(unemployment_df)[names(unemployment_df)=="State"] <- "state"
names(unemployment_df)[names(unemployment_df)=="County Code"] <- "county.fips"
names(unemployment_df)[names(unemployment_df)=="State FIPS Code"] <- "state.fips"
names(unemployment_df)[names(unemployment_df)=="Year"] <- "year"
unemployment_df$county <- strsplit(unemployment_df$county, " County") #Remove the word County from the county names
unemployment_df$county <- tolower(unemployment_df$county) #Changed the county names to lowercase
View(unemployment_df)
unemployment_df <- unite(unemployment_df, state.fips, county.fips, col ="county.fips", sep="") #Combine two columns to make them into one.
#The states that appeared as NA in this dataframe represented DC, hence the NAs will be changed to DC
unemployment_df <- replace_na(unemployment_df, list(state="DC", unemployment_df$state))
#Converting from character to numeric for merging purposes
unemployment_df$county.fips <- as.numeric(unemployment_df$county.fips)
unemployment_df$year <- as.numeric(unemployment_df$year)
#Remove untidy dataframes from the environment
rm(unemp91, unemp92, unemp95, unemp96, unemp99, unemp00, unemp03, unemp04, unemp07,  unemp08, unemp11, unemp12)
# There is an extra space in front or back of the state names. Need to remove them
unemployment_df <- unemployment_df %>%
mutate(state = str_replace_all(state, " ", "")) %>%
filter(state != "AK" & state != "PR")
#Rename the variable "Unemployment" to "unemp"
names(unemployment_df)[names(unemployment_df)=="Unemployment Rate"] <- "unemp"
#Do the lag of unemloyment
unemployment_df <- unemployment_df %>%
arrange(county.fips, year) %>%
group_by(county.fips) %>%
mutate(unemp_lag = lag(unemp)) %>%
filter(year %% 2 == 0)
#Calculate the one year percent change for unemployment
unemployment_df$unemp_gro <- (unemployment_df$unemp - unemployment_df$unemp_lag)/unemployment_df$unemp_lag
unemp91 <- read_excel('laucnty91.xlsx')
unemp91 <- separate(unemp91, County, into = c("County.name", "State"), sep=",")
unemp91 <- unemp91[-c(3218:3220), ]
unemp92 <- read_excel('laucnty92.xlsx')
unemp92 <- separate(unemp92, County, into = c("County.name", "State"), sep=",")
unemp92 <- unemp92[-c(3217:3219), ]
unemp95 <- read_excel('laucnty95.xlsx')
unemp95 <- separate(unemp95, County, into = c("County.name", "State"), sep=",")
unemp95 <- unemp95[-c(3219:3221), ]
unemp96 <- read_excel('laucnty96.xlsx')
unemp96 <- separate(unemp96, County, into = c("County.name", "State"), sep=",")
unemp96 <- unemp96[-c(3218:3220), ]
unemp99 <- read_excel('laucnty99.xlsx')
unemp99 <- separate(unemp99, County, into = c("County.name", "State"), sep=",")
unemp99 <- unemp99[-c(3219:3221), ]
unemp00 <- read_excel('laucnty00.xlsx')
unemp00 <- separate(unemp00, County, into = c("County.name", "State"), sep=",")
unemp00 <- unemp00[-c(3218:3220), ]
unemp03 <- read_excel('laucnty03.xlsx')
unemp03 <- separate(unemp03, County, into = c("County.name", "State"), sep=",")
unemp03 <- unemp03[-c(3219:3221), ]
unemp04 <- read_excel('laucnty04.xlsx')
unemp04 <- separate(unemp04, County, into = c("County.name", "State"), sep=",")
unemp04 <- unemp04[-c(3218:3220), ]
unemp07 <- read_excel('laucnty07.xlsx')
unemp07 <- separate(unemp07, County, into = c("County.name", "State"), sep=",")
unemp07 <- unemp07[-c(3219:3221), ]
unemp08 <- read_excel('laucnty08.xlsx')
unemp08 <- separate(unemp08, County, into = c("County.name", "State"), sep=",")
unemp08 <- unemp08[-c(3218:3220), ]
unemp11 <- read_excel('laucnty11.xlsx')
unemp11 <- separate(unemp11, County, into = c("County.name", "State"), sep=",")
unemp11 <- unemp11[-c(3221:3223), ]
unemp12 <- read_excel('laucnty12.xlsx')
unemp12 <- separate(unemp12, County, into = c("County.name", "State"), sep=",")
unemp12 <- unemp12[-c(3220:3222), ]
unemployment_df <- bind_rows(unemp91, unemp92, unemp95, unemp96, unemp99, unemp00, unemp03, unemp04, unemp07,  unemp08, unemp11, unemp12, .id = NULL)
names(unemployment_df)[names(unemployment_df)=="County.name"] <- "county"
names(unemployment_df)[names(unemployment_df)=="State"] <- "state"
names(unemployment_df)[names(unemployment_df)=="County Code"] <- "county.fips"
names(unemployment_df)[names(unemployment_df)=="State FIPS Code"] <- "state.fips"
names(unemployment_df)[names(unemployment_df)=="Year"] <- "year"
unemployment_df$county <- strsplit(unemployment_df$county, " County") #Remove the word County from the county names
unemployment_df$county <- tolower(unemployment_df$county) #Changed the county names to lowercase
View(unemployment_df)
unemployment_df <- unite(unemployment_df, state.fips, county.fips, col ="county.fips", sep="") #Combine two columns to make them into one.
#The states that appeared as NA in this dataframe represented DC, hence the NAs will be changed to DC
unemployment_df <- replace_na(unemployment_df, list(state="DC", unemployment_df$state))
#Converting from character to numeric for merging purposes
unemployment_df$county.fips <- as.numeric(unemployment_df$county.fips)
unemployment_df$year <- as.numeric(unemployment_df$year)
rm(unemp91, unemp92, unemp95, unemp96, unemp99, unemp00, unemp03, unemp04, unemp07,  unemp08, unemp11, unemp12)
unemployment_df <- unemployment_df %>%
mutate(state = str_replace_all(state, " ", "")) %>%
filter(state != "AK" & state != "PR")
names(unemployment_df)[names(unemployment_df)=="Unemployment Rate"] <- "unemp"
unemployment_df <- unemployment_df %>%
arrange(county.fips, year) %>%
group_by(county.fips) %>%
mutate(unemp_lag = lag(unemp)) %>%
filter(year %% 2 == 0)
unemployment_df$unemp_gro <- (unemployment_df$unemp - unemployment_df$unemp_lag)/unemployment_df$unemp_lag
unemployment_df <- unemployment_df[c(2:5,11)]
# Finally merging all the 3 dataframes: bea_df, election_df, and unemployment_df
df <- merge(unemployment_df, election_df, by= c('county.fips', 'year'), all = TRUE) %>%
merge(bea_df, by=c('county.fips', 'year'), all = TRUE)
View(df)
View(df)
all(df$county.x == df$county.y)
all(df$state.x == df$state.y)
all(df$state.x == df$state)
df1 <- df[df$county.x != df$county]
df1 <- df[df$county.x != df$county,]
View(df1)
df1$county.x
unique(df1$county.x)
unique(df$county)
unique(df1$county)
unique(df1$county.x)
View(election_df)
